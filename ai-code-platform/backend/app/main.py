from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

app = FastAPI(
    title="AI Code Platform API",
    description="AI-powered code generation, testing, and review platform",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:3001", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class CodeGenerationRequest(BaseModel):
    description: str
    language: str
    context: dict = None

class TestGenerationRequest(BaseModel):
    code: str
    language: str
    test_type: str = "unit"

class CodeReviewRequest(BaseModel):
    code: str
    language: str

@app.get("/")
async def root():
    return {"message": "AI Code Platform API", "version": "1.0.0", "status": "running"}

@app.get("/api/v1/health")
async def health_check():
    return {"status": "healthy", "services": ["code_generator", "test_generator", "code_reviewer"]}

@app.post("/api/v1/generate-code")
async def generate_code(request: CodeGenerationRequest):
    """Generate code from natural language description"""
    # Demo response for hackathon
    demo_code = f"""# Generated {request.language} code for: {request.description}

def example_function():
    \"\"\"
    This is a demo function generated by AI Code Platform.
    Description: {request.description}
    Language: {request.language}
    \"\"\"
    print("Hello from AI Code Platform!")
    return "Demo code generated successfully"

# Usage example
if __name__ == "__main__":
    result = example_function()
    print(result)
"""
    
    return {
        "success": True,
        "code": demo_code,
        "explanation": f"Generated {request.language} code based on your description: '{request.description}'",
        "confidence": 0.95,
        "suggestions": ["Add error handling", "Include unit tests", "Add type hints"]
    }

@app.post("/api/v1/generate-tests")
async def generate_tests(request: TestGenerationRequest):
    """Generate test cases for given code"""
    demo_tests = f"""# Generated {request.test_type} tests for {request.language} code

import unittest

class TestGeneratedCode(unittest.TestCase):
    
    def test_example_function(self):
        \"\"\"Test the example function\"\"\"
        # This is a demo test generated by AI Code Platform
        result = example_function()
        self.assertIsNotNone(result)
        self.assertIsInstance(result, str)
    
    def test_edge_cases(self):
        \"\"\"Test edge cases\"\"\"
        # Add your edge case tests here
        pass
    
    def test_error_handling(self):
        \"\"\"Test error handling\"\"\"
        # Add error handling tests here
        pass

if __name__ == '__main__':
    unittest.main()
"""
    
    return {
        "success": True,
        "tests": demo_tests,
        "coverage_analysis": {
            "estimated_coverage": 0.85,
            "testable_functions": 1,
            "test_count": 3
        },
        "mocks": [],
        "test_count": 3,
        "estimated_coverage": 0.85
    }

@app.post("/api/v1/review-code")
async def review_code(request: CodeReviewRequest):
    """Review code quality and provide suggestions"""
    return {
        "success": True,
        "issues": [
            {
                "line_number": 1,
                "severity": "medium",
                "category": "style",
                "title": "Missing Type Hints",
                "description": "Consider adding type hints for better code documentation",
                "suggestion": "Add type annotations to function parameters and return values"
            }
        ],
        "suggestions": [
            "Add comprehensive docstrings",
            "Include error handling",
            "Consider using type hints",
            "Add logging for debugging"
        ],
        "quality_score": 8.5,
        "security_analysis": {
            "total_security_issues": 0,
            "security_score": 10
        },
        "performance_analysis": {
            "performance_score": 9.0,
            "optimization_opportunities": 1
        },
        "maintainability_score": 8.0
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)